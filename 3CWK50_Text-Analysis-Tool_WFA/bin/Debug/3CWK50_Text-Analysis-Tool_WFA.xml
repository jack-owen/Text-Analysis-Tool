<?xml version="1.0"?>
<doc>
    <assembly>
        <name>3CWK50_Text-Analysis-Tool_WFA</name>
    </assembly>
    <members>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.AddLocation.#ctor(System.Object,_3CWK50_Text_Analysis_Tool_WFA.EditWord)">
            <summary>
            Initialise Word and EditWord objects.
            </summary>
            <param name="w"></param>
            <param name="parent"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.AddLocation.btn_add_Click(System.Object,System.EventArgs)">
            <summary>
            Adds new Location object to the Word Locations LinkedList by reading the line number and position values entered in the form
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:_3CWK50_Text_Analysis_Tool_WFA.AddLocation.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.AddLocation.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.AddLocation.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.AVLTree`1.InsertItem(`0)">
            <summary>
            Add item to Tree
            </summary>
            <param name="item">Generic object to add to tree</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.AVLTree`1.insertItem(`0,_3CWK50_Text_Analysis_Tool_WFA.Node{`0}@)">
            <summary>
            Add item to Tree 
            </summary>
            <param name="item">Generic object to add to tree</param>
            <param name="tree">Generic root node</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:_3CWK50_Text_Analysis_Tool_WFA.AVLTree`1.rotateLeft(_3CWK50_Text_Analysis_Tool_WFA.Node{`0}@)" -->
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.AVLTree`1.rotateRight(_3CWK50_Text_Analysis_Tool_WFA.Node{`0}@)">
            <summary>
            Rotation technique used to re balance the tree when balance factor is >= 2
            </summary>
            <param name="tree">Generic root node</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.AVLTree`1.RemoveItem(`0)">
            <summary>
            Remove item from Tree
            </summary>
            <param name="item">Generic object to remove from tree</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.AVLTree`1.removeItem(`0,_3CWK50_Text_Analysis_Tool_WFA.Node{`0}@)">
            <summary>
            Search for item in tree recursively and checks balance factor of tree after item is removed.
            </summary>
            <param name="item">Generic object to remove from tree</param>
            <param name="tree">Generic root node</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BinTree`1.#ctor">
            <summary>
            Create an empty tree
            </summary>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BinTree`1.#ctor(_3CWK50_Text_Analysis_Tool_WFA.Node{`0})">
            <summary>
            Create a tree with a root
            </summary>
            <param name="node">Generic node to by used as root</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BinTree`1.PreOrder(System.String@)">
            <summary>
            Calls a Pre Order Traversal of the whole Tree
            </summary>
            <param name="buffer">Variable passed by reference to store the result of the traversal</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BinTree`1.preOrder(_3CWK50_Text_Analysis_Tool_WFA.Node{`0},System.String@)">
            <summary>
            Creates a Pre Order Traversal of the whole Tree
            </summary>
            <param name="tree">Root node of the Tree to start the Traversal</param>
            <param name="buffer">Variable passed by reference to store the result of the traversal</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BinTree`1.Copy(_3CWK50_Text_Analysis_Tool_WFA.BinTree{`0})">
            <summary>
            Copies the parsed BinaryTree to this Tree
            </summary>
            <param name="tree2">The Tree to Copy to this Tree</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BinTree`1.copy(_3CWK50_Text_Analysis_Tool_WFA.Node{`0}@,_3CWK50_Text_Analysis_Tool_WFA.Node{`0})">
            <summary>
            Copies the parsed BinaryTree to the target Tree
            </summary>
            <param name="tree">The target Tree to copy</param>
            <param name="tree2">The source Tree to copy</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BinTree`1.Count">
            <summary>
            Returns the total number of items in the Tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BinTree`1.count(_3CWK50_Text_Analysis_Tool_WFA.Node{`0},System.Int32@)">
            <summary>
            Counts the total number of items in the Tree by traversing each branch
            </summary>
            <param name="tree">Root node to search</param>
            <param name="c">Item counter passed by reference</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.#ctor">
            <summary>
            Constructor to create an empty Tree
            </summary>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.InsertItem(`0)">
            <summary>
            Insert new Generic item to Binary Search Tree
            </summary>
            <param name="item">The item to insert into Tree</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.insertItem(`0,_3CWK50_Text_Analysis_Tool_WFA.Node{`0}@)">
            <summary>
            Add new item into Binary Search Tree in the correct position
            </summary>
            <param name="item"></param>
            <param name="tree"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.Height">
            <summary>
            Returns height of Binary Search Tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.height(_3CWK50_Text_Analysis_Tool_WFA.Node{`0}@)">
            <summary>
            Calculates the total height of a Tree recursively
            </summary>
            <param name="tree">The root node of the Tree to calculate height</param>
            <returns>Height of Tree</returns>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.Count">
            <summary>
            Returns total number of nodes in Tree
            </summary>
            <returns>Number of nodes in Tree</returns>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.Contains(`0)">
            <summary>
            Check whether the Tree already contains an item node
            </summary>
            <param name="item">Item to search the Tree for</param>
            <returns>True if Tree contains item</returns>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.contains(`0,_3CWK50_Text_Analysis_Tool_WFA.Node{`0})">
            <summary>
            Searches the Tree for an item's presence
            </summary>
            <param name="item">Item to search the Tree for</param>
            <param name="tree">The root node of tree/sub tree to search</param>
            <returns>Returns true if Tree contains item</returns>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.RemoveItem(`0)">
            <summary>
            Removes an item from Tree
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.removeItem(`0,_3CWK50_Text_Analysis_Tool_WFA.Node{`0}@)">
            <summary>
            Searches for an item in a Tree recursively by passing the tree/sub tree by reference and removes item if found and rejoins tree branches if required
            </summary>
            <param name="item">item to remove</param>
            <param name="tree">root of Tree/sub Tree to search for item</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.leastItem(_3CWK50_Text_Analysis_Tool_WFA.Node{`0})">
            <summary>
            Returns smallest item (left most item) in Tree
            </summary>
            <param name="tree">Tree node to start search</param>
            <returns>Left most item data in Tree</returns>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.Find(`0)">
            <summary>
            Finds the Node object by item value
            </summary>
            <param name="item">The Generic value to search for</param>
            <returns>Node object</returns>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.find(`0,_3CWK50_Text_Analysis_Tool_WFA.Node{`0})">
            <summary>
            Searches Tree for a Node object that matches item value and returns it
            </summary>
            <param name="item">Generic item to search for</param>
            <param name="tree">Tree to search Node objects</param>
            <returns>Node object result</returns>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.GetAllNodes">
            <summary>
            Get all nodes in Tree in a Post Order traversal
            </summary>
            <returns>Array of all Tree Node Data values</returns>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.getAllNodes(_3CWK50_Text_Analysis_Tool_WFA.Node{`0},System.Collections.Generic.List{`0}@)">
            <summary>
            Collates all Node object Data values into an Array recursively
            </summary>
            <param name="tree">Tree to search</param>
            <param name="list">List to store the Node values in</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.Concordance">
            <summary>
            Get List of Tree nodes in ascending Alphabetical order, using Insertion Sort for small sets and Quick Sort for larger sets to increase efficiency
            </summary>
            <returns>List of Tree node values</returns>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.InsertionSort(`0[]@)">
            <summary>
            Insertion Sort algorithm in ascending order
            </summary>
            <param name="a">Items to sort</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.QuickSort(`0[]@,System.Int32,System.Int32)">
            <summary>
            Quick Sort algorithm in ascending order
            </summary>
            <param name="items">Items to sort</param>
            <param name="left">Start position of set</param>
            <param name="right">End position of set</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.BSTree`1.swap(`0@,`0@)">
            <summary>
            Swaps the the positions of two values by reference
            </summary>
            <param name="a">First variable to swap</param>
            <param name="b">Second variable to swap</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.EditWord.textBox_word_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Update Word object word string value in the data structure and refresh the listview component 
            in the Main form with the updated Word object value.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.EditWord.listView_locations_Click(System.Object,System.EventArgs)">
            <summary>
            Select the user selected Word Location object for editing by updating the locationInEdit reference and line/pos edit fields.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.EditWord.textBox_locations_edit_lineNo_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Updates Location object lineNo value when lineNo field is changed in EditWord form
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.EditWord.textBox_locations_edit_pos_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Updates Location object pos value when pos field is changed in EditWord form
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.EditWord.refresh_label_occurrences_value">
            <summary>
            Simply set the occurence label value to the Word object location quantity
            </summary>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.EditWord.button_location_remove_Click(System.Object,System.EventArgs)">
            <summary>
            Removes Location object from Word object and refreshes label occurence and listview location values.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.EditWord.refresh_listView_locations">
            <summary>
            Fetches Word Location objects and overwrites existing listView_locations values.
            </summary>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.EditWord.button_location_create_Click(System.Object,System.EventArgs)">
            <summary>
            Creates a new form to add another location to the Word object
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:_3CWK50_Text_Analysis_Tool_WFA.EditWord.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.EditWord.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.EditWord.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Main.button_load_Click(System.Object,System.EventArgs)">
            <summary>
            Load a text file and store the unique words in an AVL Tree
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Main.button_editWord_Click(System.Object,System.EventArgs)">
            <summary>
            Manually edit (and save in the data structure) the information of a unique word
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Main.updateWordCounter">
            <summary>
            Display the number of unique words present in the text
            </summary>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Main.button_remove_word_Click(System.Object,System.EventArgs)">
            <summary>
            Remove a unique word from the data structure
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Main.textBox1_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Word input search
            (Supports task requirement No.1)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Main.refresh_listView_words(System.String)">
            <summary>
            Overwrites the listView_words component with the words stored in the AVL Tree
            (Supports task requirement No.1)
            </summary>
            <param name="wordToSearch"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Main.radioBtn_concordance_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Overwrites listView component by displaying the concordance of the text stored in the AVL Tree
            (show all the unique words present in the text in alphabetic order and the corresponding number of times in which they occur in the text).
            (Supports task requirement No.5)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Main.radioBtn_mostCommonUniqueWord_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Writes the most common unique word present in AVLTree to the listView component
            (Supports task requirement No.7)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Main.radioBtn_wordsThatOccurMoreThan_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Writes the words which occur more than a specified number of times in AVLTree to the listView component
            (Supports task requirement No.7)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Main.radioBtn_decreasingOrderOccurrence_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Writes the unique words present in the AVLTree in decreasing order of occurrence to the listView component
            (Supports task requirement No.8)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Main.radioButton_collocation_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Writes the Collocation matching results stored in the AVL Tree to the listView component - 
            for a specified pair of unique words display the number of times they 
            appear next to each other(for example “pound note”) from searching the implemented data 
            structure. Assume they must exist on the same line.
            (Supports task requirement No.9)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Main.checkForLoadedWords">
            <summary>
            Checks if the AVL Tree contains any Word objects, if not display an error message to user.
            </summary>
            <returns></returns>
        </member>
        <member name="F:_3CWK50_Text_Analysis_Tool_WFA.Main.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Main.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Main.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Location.#ctor(System.Int32,System.Int32)">
            <summary>
            Location constructor to record where a Word in a file was located
            </summary>
            <param name="lineNo">Line number of position</param>
            <param name="pos">Position in line</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Node`1.#ctor(`0)">
            <summary>
            Constructor for Node object that takes a Generic item value
            </summary>
            <param name="item">Generic value of the Node being created</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Word.#ctor(System.String)">
            <summary>
            Constructor used strictly by the Form search methods to create Word with only a name
            </summary>
            <param name="w"></param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Word.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor used strictly by the Form search methods to create a Word with a name, a line position and position in line
            </summary>
            <param name="w">Word string of the object</param>
            <param name="lineNo">Line number of Word in file</param>
            <param name="pos">Position in line in word file</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Word.AddLocation(System.Int32,System.Int32)">
            <summary>
            Adds a new location occurance to existing Word object
            </summary>
            <param name="lineNo">Line number of Word in file to add</param>
            <param name="pos">Position in line in word file to add</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Word.RemoveLocation(_3CWK50_Text_Analysis_Tool_WFA.Location)">
            <summary>
            Removes an existing location object reference from Word object
            </summary>
            <param name="l">The location object to remove (selected by user in GUI)</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Word.RemoveLocation(System.Int32,System.Int32)">
            <summary>
            Removes an existing location object of a Word by searching for the line number and position in line
            </summary>
            <param name="lineNo">Line number to search for</param>
            <param name="pos">Position in line to search for</param>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Word.CompareTo(System.Object)">
            <summary>
            Overrides compare to method to use the word name as the compare value
            </summary>
            <param name="other">The second Word object to compare to</param>
            <returns>The comparison value result</returns>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Word.ToString">
            <summary>
            Returns Word object word string
            </summary>
            <returns>Word object word string</returns>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Word.Equals(System.Object)">
            <summary>
            Checks whether two Word object words are equivalent e.g. loo = loo, chair != stool
            </summary>
            <param name="other">The word to compare to</param>
            <returns>True if the words are equivalent</returns>
        </member>
        <member name="M:_3CWK50_Text_Analysis_Tool_WFA.Word.GetHashCode">
            <summary>
            Returns numeric value to identify object in collection
            </summary>
            <returns>numeric value to identify object</returns>
        </member>
        <member name="T:_3CWK50_Text_Analysis_Tool_WFA.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:_3CWK50_Text_Analysis_Tool_WFA.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:_3CWK50_Text_Analysis_Tool_WFA.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Test.AVLTreeTest.TestInsertItemAndBalanceFactorRotations" -->
        <member name="M:Test.AVLTreeTest.TestRemoveItem">
            <summary>
            Test remove item from Tree
            </summary>
        </member>
        <member name="M:Test.AVLTreeTest.TestRemoveItemException">
            <summary>
            Test that removing an item from tree that doesn't exist throws an exception
            </summary>
        </member>
        <member name="M:Test.BinTreeTest.SetUp">
            <summary>
            Constructors a Tree with 3 nodes and one empty Tree
            </summary>
        </member>
        <member name="M:Test.BinTreeTest.TestWordNamesAndLinks">
            <summary>
            Test to check Word object creation is correct for each node in Tree
            </summary>
        </member>
        <member name="M:Test.BinTreeTest.TestPreOrderTraversal">
            <summary>
            Test to check Pre Order Traversal algorithm is result is correct
            </summary>
        </member>
        <member name="M:Test.BinTreeTest.TestCopy">
            <summary>
            Test copy whole Tree function result accuracy
            </summary>
        </member>
        <member name="M:Test.BinTreeTest.TestCount">
            <summary>
            Test the Tree count function result accuracy
            </summary>
        </member>
        <member name="M:Test.BSTreeTest.TestInsertItem">
            <summary>
            Test Binary Search Tree insert item operation
            </summary>
        </member>
        <member name="M:Test.BSTreeTest.TestHeight">
            <summary>
            Test Tree height function accuracy
            </summary>
        </member>
        <member name="M:Test.BSTreeTest.TestCount">
            <summary>
            Test Tree node count function accuracy
            </summary>
        </member>
        <member name="M:Test.BSTreeTest.TestContains">
            <summary>
            Test Contains function accuracy with Words inserted and not inserted into Tree
            </summary>
        </member>
        <member name="M:Test.BSTreeTest.TestRemoveItem">
            <summary>
            Check Remove Item from Tree is accurate
            </summary>
        </member>
        <member name="M:Test.BSTreeTest.TestRemoveItemException">
            <summary>
            Check that an exception is thrown when an attempt is made to remove an item not in the Tree
            </summary>
        </member>
        <member name="M:Test.BSTreeTest.TestFind">
            <summary>
            Test correct Word object is returned by tree find function
            </summary>
        </member>
        <member name="M:Test.BSTreeTest.TestGetAllNodes">
            <summary>
            Check correct sequence of all tree Word objects are returned
            </summary>
        </member>
        <member name="M:Test.BSTreeTest.TestConcodrance">
            <summary>
            Check the correct  list of Word objects is returned in ascending Alphabetical order
            </summary>
        </member>
    </members>
</doc>
